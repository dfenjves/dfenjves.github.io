<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Code For Foods]]></title>
  <link href="http://dfenjves.github.io/atom.xml" rel="self"/>
  <link href="http://dfenjves.github.io/"/>
  <updated>2014-04-29T11:37:29-04:00</updated>
  <id>http://dfenjves.github.io/</id>
  <author>
    <name><![CDATA[Daniel Fenjves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimus Prime Optimizes Prime]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/29/optimus-prime-optimizes-prime/"/>
    <updated>2014-04-29T10:04:04-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/29/optimus-prime-optimizes-prime</id>
    <content type="html"><![CDATA[<p style="text-align:center;"> <img src="http://dfenjves.github.io/images/optimus.jpg" alt="Optimus Prime" /></p>

<p>Hi there folks. Optimus Prime here. Few of you know this, but when I&rsquo;m not out blowing up bad guys with my ion-blaster and swinging my energon-axe, I enjoy solving Project Euler problems over a bowl of oatmeal and a cup of coffee at breakfast. Weird, right? It&rsquo;s like seeing your teacher walking out on the street, or bumping in to your shrink at the grocery store. Anyway&hellip;</p>

<p>I wanted to talk to you about a piece of a Euler problem that I particularly enjoyed optimizing (the problem itself is <a href="https://projecteuler.net/problem=10">here</a>). It&rsquo;s the method I call <code>is_prime?</code>, which, as it&rsquo;s name suggests, checks to see if a given number is prime. Sure, I could use the built in ruby method <code>Prime.prime?(n)</code>, but where would the fun be in that?</p>

<!-- more -->


<p>Here&rsquo;s my first attempt at defining this method. We&rsquo;re essentially brute-forcing our way through every possible number, returning <code>true</code> unless one of those numbers ends up dividing without a remainder into <code>n</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_prime?</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.num</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">prime_result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The optimizations I&rsquo;ve come up with all have to do with finding ways other than brute force to test the prime-ness of the number. To start, testing for factorization of numbers above one half of a given <code>n</code> is useless. i.e. 32 can never have a factor (other than itself) above 16. So let&rsquo;s change the range to one half of the given number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_prime?</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.num</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="c1"># optimization no.1</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">prime_result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so if we&rsquo;re checking to see if the number 997 is prime (it is) we&rsquo;ve now gone from looping 996 times to looping 497 times. A good start.</p>

<p>But if our <code>num</code> is divisible by 2, why are we still checking divisibility by 4,6,8 and every other even number up to num/2 ? That&rsquo;s about as silly as Megatron thinking he could win the <a href="http://tfwiki.net/wiki/Battle_of_Autobot_City">battle of Autobot city</a> by ordering the Constructicons to merge into the gestalt Devastator. Sheesh.</p>

<p>What to do about this? My solution is to add a <code>break</code> in the loop if num % n == 0. Once we find that a number is not prime, we can end the loop. It&rsquo;s redundant to have to continue checking:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_prime?</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.num</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="c1"># optimization no.1</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>          <span class="k">break</span> <span class="c1"># optimization no.2</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">prime_result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if we&rsquo;re checking to see if the number 1000 is prime, we&rsquo;ve gone from 999 loops, to 499 loops, to <b>1 LOOP</b>. We break out of the loop because we see that 1000 % 2 == 0. Amazing.</p>

<p>Our last optimization is one that isn&rsquo;t so straightforward. In fact, the only reason I know about this one is that I hang around transformers that are way smarter than I am. Here it is: You never have to check for prime factors above the square root of the number you&rsquo;re looking for. For example, the number 36 will not have any prime factors about its square root, 6. Since 2,3,4 and 6 all factor in to 36 and are less than or equal to it&rsquo;s square root, 36 is not prime. So if nothing at or under the square root of a number is a factor of the number, then that number has to be prime. We replace optimization #1 with our new optimization here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_prime?</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">num</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="c1"># optimization no.3</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">prime_result</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>          <span class="k">break</span> <span class="c1"># optimization no.2</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">prime_result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a breakdown of iterations for each of our <code>is_prime?</code> methods:</p>

<table class='table table-hover'>
    <tr>
        <th>Number to test</th>
        <th>Un-optimized</th>
        <th>Optimization 1</th>
        <th>Optimization 2</th>
        <th>Optimization 3</th>
    </tr>
        <td>20</td>
        <td>19</td>
        <td>9</td>
        <td>1</td>
        <td>1</td>
    <tr>
    </tr>
        <td>997</td>
        <td>995</td>
        <td>497</td>
        <td>497</td>
        <td>30</td>
    <tr>
    </tr>
        <td>1000</td>
        <td>998</td>
        <td>499</td>
        <td>1</td>
        <td>1</td>
    <tr>
    </tr>
        <td>5915587277</td>
        <td>5915587275</td>
        <td>2957793638</td>
        <td>2957793638</td>
        <td>76911</td>
    <tr>
</table>


<p>Cool, eh? That&rsquo;s all I have for today. Time to get back to punishing the Decepticons.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Euler - Pythagorean Triplets]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/28/project-euler-pythagorean-triplets/"/>
    <updated>2014-04-28T10:24:30-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/28/project-euler-pythagorean-triplets</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been trying to crank through Project Euler questions over the past week or so. They are pretty challenging at first sight, but I&rsquo;m finding that after looking at them for a few minutes, patterns start revealing themselves and the problem becomes much clearer. Today&rsquo;s question is the following:</p>

<blockquote><p>A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which,</p>

<p>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>
For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.</p>

<p>There exists exactly one Pythagorean triplet for which a + b + c = 1000.</p>

<p>Find the product abc</p></blockquote>

<!-- more -->


<p>I figure that the best way to approach these problems is to break them down in to manageable chunks that I can chain together to get a final answer. In this situation, I broke the problem down like this:</p>

<p>1) Initialize an instance of a class with an instance variable equal to the number that is the sum of a + b + c.</p>

<p>2) Get all three number combinations that add up to this number.</p>

<p>3) Filter these combinations to those where a &lt; b &lt; c</p>

<p>4) Check available combinations for pythagorean triplet-ness</p>

<p>5) Find the product of the numbers in the triplet.</p>

<h3>The Breakdown</h3>

<h4>Initialize an instance of a class with an instance variable equal to the number that is the sum of a + b + c.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@sum</span> <span class="o">=</span> <span class="n">sum</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward. Set the @sum instance variable to whatever the sum is that we&rsquo;re given at the start of the problem (in this case, 1000).</p>

<h4>Get all three number combinations that add up to the sum.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">combinations</span>
</span><span class='line'>  <span class="n">combinations_adding_to_n</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@sum</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@sum</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>          <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@sum</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>              <span class="n">combinations_adding_to_n</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="o">]</span> <span class="k">if</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span> <span class="o">==</span> <span class="vi">@sum</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">combinations_adding_to_n</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m creating a series of three nested loops, where the variable being set up for each loop is a, b, and c, respectively. Within the last loop I add [a,b,c] to the cobinations_adding_to_n array if the sum of a,b, and c is equal to the sum we&rsquo;ve initialize the class instance with.</p>

<h4>Filter the combinations to those where a &lt; b &lt; c</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">ordered_ascending_sum</span>
</span><span class='line'>  <span class="n">combinations</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">array_sum</span><span class="o">|</span>
</span><span class='line'>      <span class="n">array_sum</span> <span class="k">if</span> <span class="n">array_sum</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">array_sum</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">array_sum</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">array_sum</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We use the .collect method to create an array where the only items that are stored are those from combinations where a &lt; b &lt; c, or the the array&rsquo;s value at 0 index is less that its value at 1 index and its value at 1 index is less than its value 2 index. I use compact at the end of this to get rid of nil values in the array.</p>

<h4>Check available combinations for pythagorean triplet-ness</h4>

<p>I built this method to check if an array [a,b,c] is a pythagorean triplet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_pythagorean_triplet?</span><span class="p">(</span><span class="n">input_array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">input_array</span><span class="o">[</span><span class="mi">0</span><span class="o">]**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">input_array</span><span class="o">[</span><span class="mi">1</span><span class="o">]**</span><span class="mi">2</span> <span class="o">==</span> <span class="n">input_array</span><span class="o">[</span><span class="mi">2</span><span class="o">]**</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test each of your possible combinations for pythagorean triplet-ness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">triplet_for_n</span>
</span><span class='line'>  <span class="n">ordered_ascending_sum</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">abc</span><span class="o">|</span>
</span><span class='line'>      <span class="n">abc</span> <span class="k">if</span> <span class="n">is_pythagorean_triplet?</span><span class="p">(</span><span class="n">abc</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will provide the one array where [a,b,c] is a pythagorean triplet. On to our last step:</p>

<h4>Find the Product of the Numbers in the Triplet</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">product_of_triplet</span>
</span><span class='line'>  <span class="n">triplet_for_n</span><span class="o">.</span><span class="n">reduce</span><span class="o">[</span><span class="ss">:*</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! We get the when a+b+c = 1000, we run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span> <span class="o">=</span> <span class="no">Triplet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">test</span><span class="o">.</span><span class="n">product_of_triplet</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our answer is&hellip; Ha. You thought I&rsquo;d give it away here. You&rsquo;ll have to run this code yourself to find out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing an Item With the Jquery-CSS-Ajax Trifecta]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/18/removing-an-item-with-the-jquery-css-ajax-trifecta/"/>
    <updated>2014-04-18T14:27:04-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/18/removing-an-item-with-the-jquery-css-ajax-trifecta</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been working on a basic dive logging application with my buddy Chris from caguthrie.com. The idea is to take the very manual booklet that divers have to fill out after a dive and bring it online. Similar products like this exist, but we wanted to make our own.</p>

<p>I&rsquo;m using this project to beef up my javascript/ajax skills and as such, will be writing today about removing items from a page using javascript, and then removing those items from your database by making an ajax request to your server.</p>

<p>We built a section in the log where you can add fish that you&rsquo;ve seen on your dive. It&rsquo;s based on a scrape of common fish from wikipedia. Here&rsquo;s an example:</p>

<p style="text-align:center;"><img src="http://dfenjves.github.io/images/ajaxpic1.png" width="600"></p>

<!-- more -->


<p>Now let&rsquo;s say I didn&rsquo;t actually see a manefish on my most recent dive. How would I remove it? We need to figure out the following steps:</p>

<p> 1) Display a remove button when you hover over a fish.</br>
 2) Remove the fish when the remove button is pressed.</br>
 3) Send a request to the server to remove the association between the dive and the fish.</p>

<p>Let&rsquo;s go in to each of these steps in more detail:</p>

<p><strong>Part 1 &ndash; Display a Remove Button on hover using CSS:</strong></p>

<p style="text-align:center;"><img src="http://dfenjves.github.io/images/ajaxpic2.png" width="300"></p>

<p>Displaying a button on hover can be done in either javascript or css. In our case, we went with the more straightforward css. We created a button span with a specific class (&ldquo;fish-remove)&rdquo; that we placed withing the fish thumnail div. The button also contained data about the dive and the fish id (we added this data with ERB). Here is the html(with erb) for each fish &lsquo;card&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href =</span><span class="err"> </span><span class="s">&quot;&lt;%= fish.wiki_link %&gt;&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;thumbnail fish-thumb&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn fish-remove&quot;</span> <span class="na">data-fish-id=</span><span class="s">&lt;%=</span> <span class="na">fish</span><span class="err">.</span><span class="na">id</span> <span class="err">%</span><span class="nt">&gt;</span>, data-dive-id=<span class="err">&lt;</span>%= @dive.id %&gt;&gt;X<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%= image_tag &quot;http://#{fish.picture_link}&quot; %&gt;
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;caption&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;h4&gt;</span><span class="err">&lt;</span>%= fish.name %&gt;<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p> We hid the button using css:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.fish-remove</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">visibility</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span><span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span><span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span><span class="m">5px</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that we set the position to absolute and made some changes to margin, padding, etc. This was all done to improve the positioning of the button &ndash; you&rsquo;ll have to play with this yourself.</p>

<p>Next, we set the visibility for the .fish-remove class to become visible when you hover over it&rsquo;s parent .fish-thumb class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.fish-thumb</span><span class="nd">:hover</span> <span class="nc">.fish-remove</span><span class="p">{</span>
</span><span class='line'>  <span class="k">visibility</span><span class="o">:</span> <span class="k">visible</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, if you test your page out, you&rsquo;ll have the button hidden and and showing up when you hover over it. But clicking on it won&rsquo;t do anything.</p>

<p><strong>Part 2 &ndash; Using JQuery to remove the thumbnail from the page</strong></p>

<p>Great. We have a working button. Now, let&rsquo;s write some jquery code to listen for a click on the remove button and remove the thumbnail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#fish&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;.fish-remove&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;.thumbnail&quot;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What did we do here? We created an event listener (.on &ldquo;click&rdquo;) that listens for a mouse click on any &ldquo;.fish-remove&rdquo; class within the #fish id. We did this so that it will work regardless of whether items have been added to the page via agjax or not. We prevent default on the button and then remove the closest parent .thumbnail class from the page.</p>

<p>Reload your page and you&rsquo;ll see that you can now remove the image when you click on the button. Stupendous. But if you reload again, you&rsquo;ll see the image is still there. That&rsquo;s because you haven&rsquo;t actually send a request to the server to remove the association between the image and the dive. We&rsquo;ll do that next, in part three.</p>

<p><strong>Part 3 &ndash; Using ajax to remove a database association.</strong></p>

<p>If you remember, in part 1 we added additional data in to our html button element: the fish id and the dive id. We
did this so that we can pull this information in to our javascript and send it in our a jax request. To get this data in our js file, use the .data method with the attribute names that you assigned. He we set them to variables for later use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dive-id&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">diver_id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;diver-id&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also set the current item that has been selected ($(this)) to a variable for later use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">currentX</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s write the ajax request that will send  the data to the server. I&rsquo;ve created a RESTful route in my routes.rb file that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/dives/:id/fish/:fish_id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;dives#removefish&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we need to send a delete request with the dive id and the fish id. Now you see why we have that information as variables!</p>

<p>So, the Ajax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dives/&#39;</span><span class="o">+</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;/divers/&#39;</span><span class="o">+</span><span class="nx">fish_id</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;_method&quot;</span><span class="o">:</span><span class="s2">&quot;delete&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will remove the fish from the dive on the backend. Let&rsquo;s take the frontend solution we developed in part 2 and add it in to the javascript when we receive a  response from the server telling us that it successfully removed the fish:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dives/&#39;</span><span class="o">+</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;/fish/&#39;</span><span class="o">+</span><span class="nx">fish_id</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;_method&quot;</span><span class="o">:</span><span class="s2">&quot;delete&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">currentX</span><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;.thumbnail&quot;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Amazing! Put it all together, and voila:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Removing a fish</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#fish&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;.fish-remove&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dive-id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">fish_id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;fish-id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">currentX</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dives/&#39;</span><span class="o">+</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;/fish/&#39;</span><span class="o">+</span><span class="nx">fish_id</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;_method&quot;</span><span class="o">:</span><span class="s2">&quot;delete&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">currentX</span><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;.thumbnail&quot;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="c1">//end removing a fish</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you have a removefish method in your dives controller that renders &ldquo;render :json => { :head => :ok }&rdquo; when the process of removing the fish form the dive is complete. This is what your javascript will receive as the success response. Here&rsquo;s the method from our controller for reference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">removefish</span>
</span><span class='line'>    <span class="vi">@dive</span> <span class="o">=</span> <span class="no">Dive</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@fish</span> <span class="o">=</span> <span class="no">Fish</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:fish_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dive_fish</span> <span class="o">=</span> <span class="no">DiveFish</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">:dive_id</span> <span class="o">=&gt;</span> <span class="vi">@dive</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:fish_id</span> <span class="o">=&gt;</span> <span class="vi">@fish</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dive_fish</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:head</span> <span class="o">=&gt;</span> <span class="ss">:ok</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. That was a long blog post. Hopefully this is useful to Javascript/Ajax beginners!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing CarrierWave - a Simple Guide]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/18/implementing-carrierwave-a-simple-guide/"/>
    <updated>2014-04-18T13:55:53-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/18/implementing-carrierwave-a-simple-guide</id>
    <content type="html"><![CDATA[<p>This weekend I decided to add file uploads to a small project I’ve been working on (mostly to get some additional rails practice). After searching for a while, I came across Carrierwave, which is a simple ruby gem that sets you up with easy image uploading and processing.</p>

<p>The setup was a lot easier than I expected. First step was to add the carrierwave gem to the project’s gemfile and run ‘bundle install’. Straightforward. After this, run ‘rails generate uploader {uploader_name}’ (in my case, the name was guests (as in hotel guests). In your app file you’ll now find an ‘uploaders’ directory, in which you will find the uploader class that you just generated. Cool. Leave that there for now.</p>

<!-- more -->


<p>You’ll need to add a column to the ActiveRecord model that will hold your image. We’ve done this before: ‘rails generate migration Add<strong>_to</strong>__ image:string’. Run your migrations to get this into the database, and then head over to the model, where you’ll mount the uploader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount_uploader</span> <span class="ss">:image</span><span class="p">,</span> <span class="no">ImageUploader</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great. You’re almost there. The last piece of the puzzle is getting the upload link for the image into your form. Rails, as always, comes to the rescue with a file upload tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= f.file_field :image %&gt;
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s pretty much it. There are a bunch of additional settings you can change in the ImageUploader class &ndash; The ability to scale the image, to create various versions (thumbnails, different sizes, etc) and settings to determine where the image gets saved. I have this running locally now, but I imagine that once I get this up I’ll have to set the storage to AWS or something similar.</p>

<p>Peace.</p>

<p>Resources:</p>

<p><a href="http://railscasts.com/episodes/253-carrierwave-file-uploads">http://railscasts.com/episodes/253-carrierwave-file-uploads</a></p>

<p><a href="https://github.com/carrierwaveuploader/carrierwave">https://github.com/carrierwaveuploader/carrierwave</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launching a Sinatra-based Heroku App With Postgres]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/18/launching-a-sinatra-based-heroku-app-with-postgres/"/>
    <updated>2014-04-18T13:54:43-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/18/launching-a-sinatra-based-heroku-app-with-postgres</id>
    <content type="html"><![CDATA[<p>Friday was equally one of the most frustrating and satisfying days I’ve had since I’ve started at the Flatrion School. We spent the day working on our pending labs/personal projects and I picked up where I’d left off on my venture to scrape yelp and display museum opening and closing hours dynamically. Once I had my css where I felt like it was somewhat presentable, I decided to set up my application on Heroku, something I imagined would be a simple and painless process. Was I wrong. What followed was five hours of dealing with obstacle after obstacle to get my app launched &ndash; so much so that at one point I had four TAs gathered around trying to help me get through the myriad of issues I was facing. Anyway, I’m going to try to explain what I did to get my app up and running, hopefully this will be useful to other people trying to do the same thing.</p>

<!-- more -->


<p><strong>Part 1:  Moving from SQLite3 to Postgres</strong></p>

<p>Heroku doesn’t work with SQLite 3, so the first challenge was to move is-it-open-nyc to postgres. Here are the steps to make this happen:</p>

<p>+Remove sqlite3 from your gemfile and add pg (postgres).
+Change your database connection in your environment.rb file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveRecord::Base.establish_connection('postgres://localhost/project')</span></code></pre></td></tr></table></div></figure>


<p>+Initialize a new postgres server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>initdb -D projectdb</span></code></pre></td></tr></table></div></figure>


<p>+Start up the Postgres server in your project directory. This server needs to be running locally when you test your postgres-connected app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres -D projectdb</span></code></pre></td></tr></table></div></figure>


<p>+Leave the server running and in a separate terminal window create a new database within this database cluster. Make sure to give the database the same name as the connection you set up in your Activerecord::Base connection in your environmencreatedb -D project
Check and see if your database is set up (and play around with data) by running the cli for psql (more on psql here):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>psql project</span></code></pre></td></tr></table></div></figure>


<p>Once your database is set up, run your migrations in exactly the same way you&rsquo;ve been doing for sqlite3. The activerecord adaptor takes care of the connection to the database, so all you should be doing is running rake db:migrate. Seed your data, fire up your database, cross your fingers, and hope that there&rsquo;s something there!</p>

<p><strong>Part deux: Pushing to Heroku</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku init
</span><span class='line'>git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>+That&rsquo;s pretty much it, in terms of getting the app on to Heroku (More reading here), but you&rsquo;re not done. You need to set up your database on Heroku itself.
+Install the Postgres buildpack for Heroku:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku addons | grep POSTGRES</span></code></pre></td></tr></table></div></figure>


<p>+Connect heroku to your postgres db:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku addons:add heroku-postgresql:dev</span></code></pre></td></tr></table></div></figure>


<p>+When this is done, you&rsquo;ll be assigned a  HEROKU_POSTGRESQL_COLOR_URL whose URL will serve as the heroku database for your app. To get the url run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku config | grep HEROKU_POSTGRESQL</span></code></pre></td></tr></table></div></figure>


<p>+The url will look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HEROKU_POSTGRESQL_RED_URL: postgres://user3123:passkja83kd8@ec2-117-21-174-214.compute-1.amazonaws.com:6212/db982398</span></code></pre></td></tr></table></div></figure>


<p>+Jump back in to your project and replace the ActiveRecord::Base connector url  (&lsquo;postgres://localhost/project&rsquo;) with this new url. Add, commit and push again to heroku.
+From here, your last step is to run your migrations and seed your database in Heroku. To run files, you have to do the same thing your would locally, but add in &lsquo;heroku run&rsquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run rake db:migrate
</span><span class='line'>heroku run rake db:seed</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. There are a LOT of steps to go through, but if you&rsquo;ve done it once and understand what&rsquo;s going on, future attempts should be much easier.</p>

<p>Here it is, up on Heroku:</p>

<p>is-it-open-nyc.herokuapp.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes From a Weekend of Hacking]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/18/notes-from-a-weekend-of-hacking/"/>
    <updated>2014-04-18T13:53:45-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/18/notes-from-a-weekend-of-hacking</id>
    <content type="html"><![CDATA[<p>I’m piecing together a little Sinatra app that scrapes Yelp and displays schedule data for the many museums in New York. It’s an interesting exercise and has been pretty challenging so far. It’s not finished yet, but here are a few thoughts and lessons from my work:</p>

<p>1) rspec &ndash; I had a lot of time getting rspec working, but I found that checking all of the dependencies and essentially testing each piece of the process was the best way to troubleshoot the bugs I was getting. Once I had spec working, I actually got into the groove of writing tests and then immediately solving those tests in the models I was building. The best way to go about it is to write the tests precisely and with a narrow enough scope that they don’t seem totally overwhelming when it comes to solving them. Also .to be is not the same as .to eq. ().to be() looks for an exact object match, as opposed to eq, which looks for the contents of the object to be the same.</p>

<!-- more -->


<p>2)There’s an issue with the Time object in ruby. Sometimes you need times without dates &ndash; as is the case with a schedule: The MoMA is open from 8:30am to 5:30pm on Wednesdays &ndash; but it seems that the Time and DateTime classes require a date as well as a time. There’s a nice little discussion to read here: <a href="https://www.ruby-forum.com/topic/215970.">https://www.ruby-forum.com/topic/215970.</a> Here’s what I did to get around this &ndash; not sure if it’s ok or will come back to bite me so any thoughts are very welcome: I assigned an arbitrary date (2000,1,1) to serve as a placeholder. So I have a string “10:30 am &ndash; 5:00pm”. How do I get this into a Time format?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">opening_string</span> <span class="o">=</span> <span class="n">week_hash</span><span class="o">[</span><span class="n">day</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span><span class="n">opening_string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="p">),(</span><span class="n">opening_string</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="o">].</span><span class="n">to_i</span><span class="p">))</span>
</span><span class='line'><span class="vi">@open</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%H:%M&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">closing_string</span> <span class="o">=</span> <span class="n">week_hash</span><span class="o">[</span><span class="n">day</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span><span class="n">closing_string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="o">+</span><span class="mi">12</span><span class="p">),(</span><span class="n">closing_string</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="o">].</span><span class="n">to_i</span><span class="p">))</span>
</span><span class='line'><span class="vi">@close</span> <span class="o">=</span> <span class="nb">p</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%H:%M”)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It’s not pretty, but it seems to do the trick. If there’s a better way to do this, I’d like to know it.</p>

<p>3) It was interesting to think about the structure of the project. I built one model whose purpose it is to scrape Yelp using nokogiri, and another model to build a museum instance using the data that was pulled from yelp. I had trouble with redundancy as there were methods in the two models that seemed to be doing the same thing. My initialize method for a Museum.new is a good example of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">yelp_object</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@yelp_object</span> <span class="o">=</span> <span class="n">yelp_object</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="n">yelp_object</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="vi">@schedule</span> <span class="o">=</span> <span class="n">yelp_object</span><span class="o">.</span><span class="n">schedule</span>
</span><span class='line'>      <span class="n">set_week_hash</span>
</span><span class='line'>      <span class="n">set_times</span><span class="p">(</span><span class="ss">:wednesday</span><span class="p">)</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially the name and schedule instance variables are just pulling from the yelp-object methods with the same names. Seems weird.</p>

<p>Anyway, I’m rambling &ndash; would love some feedback if anyone can provide!
D</p>

<p>The code so far: <a href="https://github.com/dfenjves/is-it-open">https://github.com/dfenjves/is-it-open</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Legal Is Web Scraping?"]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/18/how-legal-is-web-scraping/"/>
    <updated>2014-04-18T13:53:13-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/18/how-legal-is-web-scraping</id>
    <content type="html"><![CDATA[<p>I’ve recently learned how to perform basic web scraping using nothing but Nokogiri, Open-Uri, Ruby, a paperclip, and the internet. It’s an awesome feeling &ndash; to be able to MacGyver your way deep in to the code of a massive website and pull out exactly what you need, throw it into a database, and then manipulate that data to your heart’s content. It’s like I’ve discovered that I have a secret superpower, and am only beginning to see what I can do with it.</p>

<p style="text-align:center;"> <img src="http://dfenjves.github.io/images/macgyver.jpg" alt="MacGyver" /></p>

<p style="text-align:center;"> <em>How I felt when I scraped my first website</em></p>

<p>But, as the cliched superhero movie line goes: Son, with great power comes great responsibility. Cue John Williams music.</p>

<!-- more -->


<p>What is that responsibility when it comes to web scraping, exactly? Well, web scraping lives in a grey area of internet law. It’s a weird twilight zone of legality, where people operate in an uncertain haze- unsure of whether scraping is within or beyond the bounds of the law. Let’s examine this grey area in further depth.</p>

<p>But first, a primer on scraping. Imagine being able to set up a system on your computer that goes through every link on Amazon.com and finds the name of every book in their catalog, it’s price, and it’s release date. Or building a program that is able to go through your Facebook friends and pull their publicly available information in to your computer. Or grabbing prices on Craigslist for all 400 apartment listings within a mile of your house in New York without having to manually click on each link. That is web scraping in a nutshell. Using a variety of programs, a scraper is a computer program developed to copy publicly available information from a website.</p>

<p>Notice that I said <em>publicly available</em>. Obviously scraping someone’s online bank accounts will get you thrown in jail faster than you can say <em>identity theft</em>. It’s the stuff that’s out there for everyone to see that makes for an interesting exploration. Is information in the yellow pages subject to copyright protection? Or listings on craigslist? What about the titles and urls of YouTube videos? Check out these interesting legal cases and see what conclusion you can come to:</p>

<p><strong>Feist Publications, Inc., v. Rural Telephone Service Co.</strong>, <em>499 U.S. 340 (1991),[1] is a decision by the Supreme Court of the United States establishing that information alone without a minimum of original creativity cannot be protected by copyright. In the case appealed, Feist had copied information from Rural’s telephone listings to include in its own, after Rural had refused to license the information. Rural sued for copyright infringement. The Court ruled that information contained in Rural’s phone directory was not copyrightable and that therefore no infringement existed.</em></p>

<p>Ok, so pulling information from something like a telephone directory isn’t copyright infringement, because they’re facts and not an artistic creation. Cool. But what is the equivalent of that online? Craigslist? Yellowpages.com (ha.)?</p>

<p><strong>American Airlines vs. Farechase</strong>
 <em>AA successfully obtained an injunction from a Texas trial court, stopping FareChase from selling software that enables users to compare online fares if it also searches AA’s website. The airline argued that FareChase’s websearch software trespassed on AA’s servers when it collected the publicly available data. FareChase filed an appeal in March 2003. By June, FareChase and AA agreed to settle and the appeal was dropped.[9]</em></p>

<p>Woah, woah, woah. Farechase was blocked from scraping AA’s site, despite the data begin publicly available and factual (although sometimes airline prices can definitely seem like fiction) ? That seems to contradict the Feist case, doesn’t it? If you dig a little deeper in to the decision though, you’ll note that American claimed their ‘web fares’ were restricted to only their site (as opposed to the fares disseminated to other websites &ndash; think Orbitz or Kayak). Since they were restricted to their own site, perhaps the scrape wasn’t pulling <em>publicly available</em> information, per se. Although that seems like something of a leap, if I may say so.</p>

<p><strong>eBay v. Bidder’s Edge</strong>, <em>100 F.Supp.2d 1058 (N.D. Cal. 2000), was a leading case applying the trespass to chattels doctrine to online activities. In 2000, eBay, an online auction company, successfully used the ‘trespass to chattels’ theory to obtain a preliminary injunction preventing Bidder’s Edge, an auction data aggregator, from using a ‘crawler&#8217; to gather data from eBay&rsquo;s website.[1] The opinion was a leading case applying ‘trespass to chattels’ to online activities, although its analysis has been criticized in more recent jurisprudence.</em></p>

<p>So web crawling differs from web scraping in several ways, but the idea is the same &ndash; pulling data out of  a website. The eBay case is a big one for internet law &ndash; Bidder’s Edge was enjoined from crawling eBay for auction data on the grounds of ‘trespass to chattel’ &ndash; <em>a tort whereby the infringing party has intentionally (or, in Australia, negligently) interfered with another person’s lawful possession of a chattel (movable personal property).</em></p>

<p>Another additional consideration: While scraping may or may not be of dubious legality, websites set their own terms of service and can ban you from accessing them if you engage in practices that violate these terms. For example, from the YouTube terms:</p>

<p><em>You agree not to use or launch any automated system, including without limitation, “robots,” “spiders,” or “offline readers,” that accesses the Service in a manner that sends more request messages to the YouTube servers in a given period of time than a human can reasonably produce in the same period by using a conventional on-line web browser.</em></p>

<p>I guess the conclusion to draw here is that while the legality of scraping is pretty unclear, unless you’re willing to take on a company in court, err on the side of using an API or other acceptable method of accessing their data. Or don’t, you rebel. It’s up to you.</p>

<p>(Additional interesting reading from the New Yorker <a href="http://www.newyorker.com/online/blogs/elements/2014/02/when-programmers-scrape-by.html">here</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/18/test/"/>
    <updated>2014-04-18T13:50:08-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/18/test</id>
    <content type="html"><![CDATA[<p>Hello World.</p>
]]></content>
  </entry>
  
</feed>
