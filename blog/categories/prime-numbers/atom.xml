<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Prime Numbers | .Mapless]]></title>
  <link href="http://dfenjves.github.io/blog/categories/prime-numbers/atom.xml" rel="self"/>
  <link href="http://dfenjves.github.io/"/>
  <updated>2014-08-29T15:57:28-04:00</updated>
  <id>http://dfenjves.github.io/</id>
  <author>
    <name><![CDATA[Daniel Fenjves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimus Prime Optimizes Prime]]></title>
    <link href="http://dfenjves.github.io/blog/2014/04/29/optimus-prime-optimizes-prime/"/>
    <updated>2014-04-29T10:04:04-04:00</updated>
    <id>http://dfenjves.github.io/blog/2014/04/29/optimus-prime-optimizes-prime</id>
    <content type="html"><![CDATA[<p style="text-align:center;"> <img src="/images/Optimus.jpg" alt="Optimus Prime" /></p>

<p>Hi there folks. Optimus Prime here. Few of you know this, but when I&rsquo;m not out blowing up bad guys with my ion-blaster and swinging my energon-axe, I enjoy solving Project Euler problems over a bowl of oatmeal and a cup of coffee at breakfast. Weird, right? It&rsquo;s like seeing your teacher walking out on the street, or bumping in to your shrink at the grocery store. Anyway&hellip;</p>

<p>I wanted to talk to you about a piece of a Euler problem that I particularly enjoyed optimizing (the problem itself is <a href="https://projecteuler.net/problem=10">here</a>). It&rsquo;s the method I call <code>is_prime?</code>, which, as it&rsquo;s name suggests, checks to see if a given number is prime. Sure, I could use the built in ruby method <code>Prime.prime?(n)</code>, but where would the fun be in that?</p>

<!-- more -->


<p>Here&rsquo;s my first attempt at defining this method. We&rsquo;re essentially brute-forcing our way through every possible number, returning <code>true</code> unless one of those numbers ends up dividing without a remainder into <code>n</code>:</p>

<p>```ruby</p>

<pre><code>def is_prime?(num)
    prime_result = true
    (2..num-1).each do |n|
        if num % n == 0
            prime_result = false
        end
    end
    prime_result
end
</code></pre>

<p><code>``
The optimizations I've come up with all have to do with finding ways other than brute force to test the prime-ness of the number. To start, testing for factorization of numbers above one half of a given</code>n` is useless. i.e. 32 can never have a factor (other than itself) above 16. So let&rsquo;s change the range to one half of the given number:</p>

<p>```ruby</p>

<pre><code>def is_prime?(num)
    prime_result = true
    (2..num/2).each do |n| # optimization no.1
        if num % n == 0
            prime_result = false
        end
    end
    prime_result
end
</code></pre>

<p>```</p>

<p>Ok, so if we&rsquo;re checking to see if the number 997 is prime (it is) we&rsquo;ve now gone from looping 996 times to looping 497 times. A good start.</p>

<p>But if our <code>num</code> is divisible by 2, why are we still checking divisibility by 4,6,8 and every other even number up to num/2 ? That&rsquo;s about as silly as Megatron thinking he could win the <a href="http://tfwiki.net/wiki/Battle_of_Autobot_City">battle of Autobot city</a> by ordering the Constructicons to merge into the gestalt Devastator. Sheesh.</p>

<p>What to do about this? My solution is to add a <code>break</code> in the loop if num % n == 0. Once we find that a number is not prime, we can end the loop. It&rsquo;s redundant to have to continue checking:</p>

<p>```ruby</p>

<pre><code>def is_prime?(num)
    prime_result = true
    (2..num/2).each do |n| # optimization no.1
        if num % n == 0
            prime_result = false
            break # optimization no.2
        end
    end
    prime_result
end
</code></pre>

<p>```</p>

<p>Now, if we&rsquo;re checking to see if the number 1000 is prime, we&rsquo;ve gone from 999 loops, to 499 loops, to <b>1 LOOP</b>. We break out of the loop because we see that 1000 % 2 == 0. Amazing.</p>

<p>Our last optimization is one that isn&rsquo;t so straightforward. In fact, the only reason I know about this one is that I hang around transformers that are way smarter than I am. Here it is: You never have to check for prime factors above the square root of the number you&rsquo;re looking for. For example, the number 36 will not have any prime factors about its square root, 6. Since 2,3,4 and 6 all factor in to 36 and are less than or equal to it&rsquo;s square root, 36 is not prime. So if nothing at or under the square root of a number is a factor of the number, then that number has to be prime. We replace optimization #1 with our new optimization here:</p>

<p>```ruby</p>

<pre><code>def is_prime?(num)
    prime_result = true
    (2..Math.sqrt(num)).each do |n| # optimization no.3
        if num % n == 0
            prime_result = false
            break # optimization no.2
        end
    end
    prime_result
end
</code></pre>

<p>```</p>

<p>Here is a breakdown of iterations for each of our <code>is_prime?</code> methods:</p>

<table class='table table-hover'>
    <tr>
        <th>Number to test</th>
        <th>Un-optimized</th>
        <th>Optimization 1</th>
        <th>Optimization 2</th>
        <th>Optimization 3</th>
    </tr>
        <td>20</td>
        <td>19</td>
        <td>9</td>
        <td>1</td>
        <td>1</td>
    <tr>
    </tr>
        <td>997</td>
        <td>995</td>
        <td>497</td>
        <td>497</td>
        <td>30</td>
    <tr>
    </tr>
        <td>1000</td>
        <td>998</td>
        <td>499</td>
        <td>1</td>
        <td>1</td>
    <tr>
    </tr>
        <td>5915587277</td>
        <td>5915587275</td>
        <td>2957793638</td>
        <td>2957793638</td>
        <td>76911</td>
    <tr>
</table>


<p>Cool, eh? That&rsquo;s all I have for today. Time to get back to battling the Decepticons.</p>
]]></content>
  </entry>
  
</feed>
